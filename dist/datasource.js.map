{"version":3,"sources":["../src/datasource.js"],"names":["_","DataParser","UrlBuilder","RequestCache","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","jsonData","sensorid","apikey","builder","type","name","q","withCredentials","console","debug","basicAuth","headers","length","requester","str","arr","buildUrl","targets","buildQueryUrl","options","query","buildQueryParameters","filter","t","hide","when","data","url","cacheKey","makeISOString","range","from","to","maxDataPoints","promise","doRequest","pq","parseQuery","x","info","interpolated","target","replace","myHandler","obj","_embedded","streams","arr_reply","key","id","resulttype","push","mapToTextValue","myPromise","Promise","resolve","reject","then","multiple","parser","parseData","parseDataSingle","streamid","map","join","v","toISOString","count","Error","err","status","message","title","method","response","parseTestResult","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","result","d","i","text","value","isObject","datasourceRequest","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport { DataParser } from \"./dataparse.js\";\nimport { UrlBuilder } from \"./urlbuilder.js\";\nimport { RequestCache } from \"./requestcache.js\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n\n    if (instanceSettings.jsonData != null) {\n      this.sensorid = instanceSettings.jsonData['sensorid'] || \"\";\n      this.apikey = instanceSettings.jsonData['apikey'] || \"\";\n    }\n    else {\n      this.sensorid = \"\";\n      this.apikey = \"\";\n    }\n    this.builder = new UrlBuilder(this.apikey, this.sensorid);\n\n    this.type = instanceSettings.type;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n\n    console.debug('basic auth');\n    console.debug(instanceSettings.basicAuth);\n\n    this.headers = { 'Content-Type': 'application/json' };\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    this.requester = new RequestCache(this.backendSrv, this.withCredentials, this.headers);\n\n  }\n\n  buildUrl(str, arr) {\n    return this.builder.buildUrl(str, arr);\n  }\n\n  buildQueryUrl(targets) {\n    return this.builder.buildQueryUrl(targets);\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    // build URL\n    var arr = [];\n    var url = this.buildQueryUrl(query.targets);\n\n    // request key to differentiate requests with different returning data but with same URL\n    var cacheKey = {\n      url: url,\n      query:\n      [\n        this.makeISOString(query.range.from),\n        this.makeISOString(query.range.to),\n        query.maxDataPoints\n      ]\n    };\n\n    var promise = this.requester.doRequest(url, cacheKey, x => {\n      var pq = this.parseQuery(x, query);\n      return pq;\n    });\n\n    return promise;\n  }\n\n\n  metricFindQuery(query) {\n    console.info('metricFindQuery');\n\n    var interpolated = {\n      target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    var url = this.buildQueryUrl();\n\n    var cacheKey = {\n      url: url,\n      query: \"findMetrics\"\n    };\n\n\n    var myHandler = x => {\n      var obj = x.data._embedded.streams;\n\n      var arr_reply = [];\n\n      for (var key in obj) {\n        var id = obj[key].id;\n        var type = obj[key].resulttype;\n\n        arr_reply.push(id);\n      }\n\n      return this.mapToTextValue({ data: arr_reply });\n    };\n\n    // get the promise\n    var promise = this.requester.doRequest(url, cacheKey);\n\n    // wrap around another promise\n    var myPromise = new Promise((resolve, reject) => {\n      resolve(promise);\n    });\n\n    return myPromise.then(myHandler);\n\n  }\n\n\n\n  parseData(data, multiple) {\n    console.info(\"parseData\");\n    var parser = new DataParser();\n\n    if (multiple)\n      return parser.parseData(data);\n    return parser.parseDataSingle(data);\n  }\n\n  parseQuery(str, query) {\n\n    var streams = str.data._embedded.streams;\n\n    var streamid = streams.map(x => x.id).join(\",\");\n\n    var arr = [];\n    arr.push('streamid=' + streamid);\n    arr.push('start=' + this.makeISOString(query.range.from));\n    arr.push('end=' + this.makeISOString(query.range.to));\n    arr.push('limit=' + query.maxDataPoints);\n    arr.push('sort=descending');\n    arr.push('media=json');\n\n    var url = this.buildUrl('/observations', arr);\n\n    var cacheKey = { url: url, query: \"extended\" };\n\n    var multiple = streams.length > 1;\n\n    var promise = this.requester.doRequest(url, cacheKey, x => {\n      x.data = this.parseData(x.data, multiple);\n      return x;\n    });\n\n    return promise;\n  }\n\n  makeISOString(v) {\n    if (v == null) { return null; }\n\n    var str = v.toISOString();\n    return str;\n  }\n\n  parseTestResult(data) {\n    try {\n      var count = data.count;\n      if (count > 100)\n        throw Error('too many streams, plugin only supports up to 100');\n    }\n    catch (err) {\n      return { status: \"error\", message: err.message, title: \"Error\" };\n    }\n\n    return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n  }\n\n  testDatasource() {\n    var url = this.buildQueryUrl();\n\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        console.info(\"Response = 200\");\n\n        return this.parseTestResult(response.data);\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.buildUrl('/annotations_not_implemented'),\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i };\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    var promise = this.backendSrv.datasourceRequest(options);\n    promise.then(x => {\n      console.info(\"performing HTTP request\");\n      return x;\n    })\n    return promise;\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}